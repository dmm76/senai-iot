#include <Wire.h> //INCLUSÃO DA BIBLIOTECA NECESSÁRIA
#include <SPI.h> //INCLUSÃO DE BIBLIOTECA
#include <MFRC522.h> //INCLUSÃO DE BIBLIOTECA
#include <LiquidCrystal_I2C.h> //INCLUSÃO DE BIBLIOTECA
#include <Servo.h> //INCLUSÃO DA BIBLIOTECA
#include "Ultrasonic.h" //INCLUSÃO DA BIBLIOTECA NECESSÁRIA PARA FUNCIONAMENTO DO CÓDIGO

#define SS_PIN 10 //PINO SDA
#define RST_PIN 9 //PINO DE RESET

const int pinoServo = 4; //PINO DIGITAL UTILIZADO PELO SERVO
const int pinoLedVerde = 3; //PINO DIGITAL REFERENTE AO LED VERDE
const int pinoLedVermelho = 2; //PINO DIGITAL REFERENTE AO LED VERMELHO
const int echoPin = 6; //PINO DIGITAL UTILIZADO PELO HC-SR04 ECHO(RECEBE)
const int trigPin = 7; //PINO DIGITAL UTILIZADO PELO HC-SR04 TRIG(ENVIA)
const int pinoBuzzer = 5; //PINO DIGITAL EM QUE O BUZZER ESTÁ CONECTADO

int pos; //POSIÇÃO DO SERVO
byte anguloCancelaFechada = 74; //VALOR DO ÂNGULO PARA CANCELA FECHADA
byte anguloCancelaAberta = 174; 
int distancia; //CRIA UMA VARIÁVEL CHAMADA "distancia" DO TIPO INTEIRO
Servo s; //OBJETO DO TIPO SERVO

LiquidCrystal_I2C lcd(0x27,2,1,0,4,5,6,7,3, POSITIVE); //ENDEREÇO DO I2C E DEMAIS INFORMAÇÕES
Ultrasonic ultrasonic(trigPin,echoPin); //INICIALIZANDO OS PINOS
MFRC522 rfid(SS_PIN, RST_PIN); //PASSAGEM DE PARÂMETROS REFERENTE AOS PINOS

void setup(){

  pinMode(echoPin, INPUT); //DEFINE O PINO COMO ENTRADA (RECEBE)
  pinMode(trigPin, OUTPUT); //DEFINE O PINO COMO SAÍDA (ENVIA)
  pinMode(pinoBuzzer, OUTPUT); //DECLARA O PINO COMO SENDO SAÍDA
  pinMode(pinoServo, OUTPUT); //DEFINE O PINO COMO SAÍDA
  s.attach(pinoServo); //ASSOCIAÇÃO DO PINO DIGITAL AO OBJETO DO TIPO SERVO

  lcd.begin (16,2); //SETA A QUANTIDADE DE COLUNAS(16) E O NÚMERO DE LINHAS(2) DO DISPLAY
  lcd.setBacklight(HIGH); //LIGA O BACKLIGHT (LUZ DE FUNDO)

  Wire.begin(); //INICIALIZA A BIBLIOTECA WIRE
  SPI.begin(); //INICIALIZA O BARRAMENTO SPI
  rfid.PCD_Init(); //INICIALIZA MFRC522
  
  pinMode(pinoLedVerde, OUTPUT); //DEFINE O PINO COMO SAÍDA
  pinMode(pinoLedVermelho, OUTPUT); //DEFINE O PINO COMO SAÍDA
  
  digitalWrite(pinoLedVerde, LOW); //LED INICIA DESLIGADO
  digitalWrite(pinoLedVermelho, LOW); //LED INICIA DESLIGADO
}

void loop() {
  lcd.setCursor(0,0);
  lcd.print("Douglas Sistemas"); //ESCREVE O TEXTO NO DISPLAY
  lcd.setCursor(0,1);
  lcd.print("  de Seguranca "); //ESCREVE O TEXTO NO DISPLAY

  hcsr04(); // FAZ A CHAMADA DO MÉTODO "hcsr04()" 

  leituraRfid(); //CHAMA A FUNÇÃO RESPONSÁVEL PELA VALIDAÇÃO DA TAG RFID
}

//FUNÇÃO DE VALIDAÇÃO DA TAG RFID
void leituraRfid(){
  if (!rfid.PICC_IsNewCardPresent() || !rfid.PICC_ReadCardSerial()) //VERIFICA SE O CARTÃO PRESENTE NO LEITOR É DIFERENTE DO ÚLTIMO CARTÃO LIDO. CASO NÃO SEJA, FAZ
    return; //RETORNA PARA LER NOVAMENTE

  /***INICIO BLOCO DE CÓDIGO RESPONSÁVEL POR GERAR A TAG RFID LIDA***/
  String strID = ""; 
  for (byte i = 0; i < 4; i++) {
    strID +=
    (rfid.uid.uidByte[i] < 0x10 ? "0" : "") +
    String(rfid.uid.uidByte[i], HEX) +
    (i!=3 ? ":" : "");
  }
  strID.toUpperCase();
/***FIM DO BLOCO DE CÓDIGO RESPONSÁVEL POR GERAR A TAG RFID LIDA***/

  //O ENDEREÇO "27:41:AA:AB" DEVERÁ SER ALTERADO PARA O ENDEREÇO DA SUA TAG RFID QUE CAPTUROU ANTERIORMENTE
  if (strID.indexOf("C2:C6:CE:54") >= 0) { //SE O ENDEREÇO DA TAG LIDA FOR IGUAL AO ENDEREÇO INFORMADO, FAZ
    digitalWrite(pinoLedVerde, HIGH); //LIGA O LED VERDE
    delay(1000); //INTERVALO DE 4 SEGUNDOS
    digitalWrite(pinoLedVerde, LOW); //DESLIGA O LED VERDE
    
    lcd.setCursor(0,0); //SETA A POSIÇÃO DO CURSOR
    lcd.print("ENTRADA LIBERADA"); //IMPRIME O TEXTO NO DISPLAY LCD
    lcd.setCursor(0,1); //SETA A POSIÇÃO DO CURSOR
    lcd.print(" SEJA BEM VINDO "); //IMPRIME O TEXTO NO DISPLAY LCD
    delay(2000); //INTERVALO DE 2 SEGUNDOS
    lcd.clear();
    s.write(0); 
    while(distancia <= 30){
      tone(pinoBuzzer,1500);//ACIONA O BUZZER
      hcsr04();
    }
    noTone(pinoBuzzer);//BUZZER PERMANECE DESLIGADO
    delay(1000);
    s.write(180); 
    
  }else{ //SENÃO, FAZ (CASO A TAG LIDA NÃO SEJÁ VÁLIDA)
    digitalWrite(pinoLedVermelho, HIGH); //LIGA O LED VERMELHO
    delay(1000); ////INTERVALO DE 6 SEGUNDOS
    digitalWrite(pinoLedVermelho, LOW); //DESLIGA O LED VERDE
    
    lcd.clear();
    lcd.setCursor(0,0); //SETA A POSIÇÃO DO CURSOR
    lcd.print("ENTRADA PROIBIDA"); //IMPRIME O TEXTO NO DISPLAY LCD
    lcd.setCursor(0,1); //SETA A POSIÇÃO DO CURSOR
    lcd.print("  TAG INCORRETA"); //IMPRIME O TEXTO NO DISPLAY LCD
    delay(2000); //INTERVALO DE 2 SEGUNDOS
    lcd.clear();
    

  }
  

  rfid.PICC_HaltA(); //PARADA DA LEITURA DO CARTÃO
  rfid.PCD_StopCrypto1(); //PARADA DA CRIPTOGRAFIA NO PCD
  
  lcd.setCursor(0,0);
  lcd.print("Douglas Sistemas"); //ESCREVE O TEXTO NO DISPLAY
  lcd.setCursor(0,1);
  lcd.print("  de Seguranca "); //ESCREVE O TEXTO NO DISPLAY
 
  }

  //MÉTODO RESPONSÁVEL POR CALCULAR A DISTÂNCIA
  void hcsr04(){
  digitalWrite(trigPin, LOW); //SETA O PINO 6 COM UM PULSO BAIXO "LOW"
  delayMicroseconds(2); // DELAY DE 2 MICROSSEGUNDOS
  digitalWrite(trigPin, HIGH); //SETA O PINO 6 COM PULSO ALTO "HIGH"
  delayMicroseconds(10); // DELAY DE 10 MICROSSEGUNDOS
  digitalWrite(trigPin, LOW); //SETA O PINO 6 COM PULSO BAIXO "LOW" NOVAMENTE
  // FUNÇÃO RANGING, FAZ A CONVERSÃO DO TEMPO DE
  //RESPOSTA DO ECHO EM CENTÍMETROS E ARMAZENA
  //NA VARIÁVEL "distancia"
  distancia = (ultrasonic.Ranging(CM)); // VARIÁVEL GLOBAL RECEBE O VALOR DA DISTÂNCIA MEDIDA
  delay(500); //INTERVALO DE 500 MILISSEGUNDOS
  }	
